
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000196  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001c5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cc  00000000  00000000  00000213  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000272  00000000  00000000  000010b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001324  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bd  00000000  00000000  0000154b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000114  00000114  00000188  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.i2c_init 00000006  00000102  00000102  00000176  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.i2c_start 00000006  00000108  00000108  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_stop 00000006  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_send 0000000e  000000f4  000000f4  00000168  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000072  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  0000011c  0000011c  00000190  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  0000011e  0000011e  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000120  00000120  00000194  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  000000de  000000de  00000152  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000118  00000118  0000018c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  4c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

00000102 <i2c_init>:

#endif /* MAIN_H_ */

void i2c_init(void)
{
	TWBR = 0x20; //десятичное  32-  частота 10kHZ при тактировании 8 мГц
 102:	80 e2       	ldi	r24, 0x20	; 32
 104:	80 b9       	out	0x00, r24	; 0
 106:	08 95       	ret

Disassembly of section .text.i2c_start:

00000108 <i2c_start>:
}

void i2c_start(void) // старт и2с
{
	TWCR =(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);// Interrput \ start \ enable
 108:	84 ea       	ldi	r24, 0xA4	; 164
 10a:	86 bf       	out	0x36, r24	; 54
 10c:	08 95       	ret

Disassembly of section .text.i2c_stop:

0000010e <i2c_stop>:
}
void i2c_stop(void) // stop i2c
{
	TWCR =(1<<TWINT)|(1<<TWSTO)|(1<<TWEN); // в бит стоп 1
 10e:	84 e9       	ldi	r24, 0x94	; 148
 110:	86 bf       	out	0x36, r24	; 54
 112:	08 95       	ret

Disassembly of section .text.i2c_send:

000000f4 <i2c_send>:
}
void i2c_send(unsigned char data)
{
	TWDR = data;// запись данных в регистр данных
  f4:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);//вкл передача
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT))); // twint ждем в нуле
  fa:	06 b6       	in	r0, 0x36	; 54
  fc:	07 fe       	sbrs	r0, 7
  fe:	fd cf       	rjmp	.-6      	; 0xfa <i2c_send+0x6>
}
 100:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:




int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	d4 50       	subi	r29, 0x04	; 4
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
uint8_t buffer[1024]; // 1024 байта
for(int i = 0; i < 1024; i++) 
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	09 c0       	rjmp	.+18     	; 0x98 <main+0x2c>
	{
		buffer[i] = 0xFF;
  86:	e1 e0       	ldi	r30, 0x01	; 1
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	ec 0f       	add	r30, r28
  8c:	fd 1f       	adc	r31, r29
  8e:	e8 0f       	add	r30, r24
  90:	f9 1f       	adc	r31, r25
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	20 83       	st	Z, r18


int main(void)
{
uint8_t buffer[1024]; // 1024 байта
for(int i = 0; i < 1024; i++) 
  96:	01 96       	adiw	r24, 0x01	; 1
  98:	81 15       	cp	r24, r1
  9a:	24 e0       	ldi	r18, 0x04	; 4
  9c:	92 07       	cpc	r25, r18
  9e:	9c f3       	brlt	.-26     	; 0x86 <main+0x1a>
		buffer[i] = 0xFF;
		}
	
	
	
i2c_init();
  a0:	0e 94 81 00 	call	0x102	; 0x102 <i2c_init>
	
i2c_start();     
  a4:	0e 94 84 00 	call	0x108	; 0x108 <i2c_start>
i2c_send(0b01111000);  
  a8:	88 e7       	ldi	r24, 0x78	; 120
  aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <i2c_send>
i2c_send(0x40);
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	0e 94 7a 00 	call	0xf4	; 0xf4 <i2c_send>
int i;    
for(i = 0; i < 1024; i++) {
  b4:	00 e0       	ldi	r16, 0x00	; 0
  b6:	10 e0       	ldi	r17, 0x00	; 0
  b8:	0b c0       	rjmp	.+22     	; 0xd0 <main+0x64>
	i2c_send(buffer[i]);
  ba:	e1 e0       	ldi	r30, 0x01	; 1
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	ec 0f       	add	r30, r28
  c0:	fd 1f       	adc	r31, r29
  c2:	e0 0f       	add	r30, r16
  c4:	f1 1f       	adc	r31, r17
  c6:	80 81       	ld	r24, Z
  c8:	0e 94 7a 00 	call	0xf4	; 0xf4 <i2c_send>
	
i2c_start();     
i2c_send(0b01111000);  
i2c_send(0x40);
int i;    
for(i = 0; i < 1024; i++) {
  cc:	0f 5f       	subi	r16, 0xFF	; 255
  ce:	1f 4f       	sbci	r17, 0xFF	; 255
  d0:	01 15       	cp	r16, r1
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	18 07       	cpc	r17, r24
  d6:	8c f3       	brlt	.-30     	; 0xba <main+0x4e>
	i2c_send(buffer[i]);
	}
		
i2c_stop();
  d8:	0e 94 87 00 	call	0x10e	; 0x10e <i2c_stop>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x70>

Disassembly of section .text.__dummy_fini:

0000011c <_fini>:
 11c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000011e <__funcs_on_exit>:
 11e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000120 <__simulator_exit>:
 120:	08 95       	ret

Disassembly of section .text.exit:

000000de <exit>:
  de:	ec 01       	movw	r28, r24
  e0:	0e 94 8f 00 	call	0x11e	; 0x11e <__funcs_on_exit>
  e4:	0e 94 8e 00 	call	0x11c	; 0x11c <_fini>
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 90 00 	call	0x120	; 0x120 <__simulator_exit>
  ee:	ce 01       	movw	r24, r28
  f0:	0e 94 8c 00 	call	0x118	; 0x118 <_Exit>

Disassembly of section .text._Exit:

00000118 <_Exit>:
 118:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
