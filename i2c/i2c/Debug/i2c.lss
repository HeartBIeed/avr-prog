
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000173  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000181  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000878  00000000  00000000  000001c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000597  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  0000140f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000143c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000c2  000000c2  00000136  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.i2c_init 00000006  000000b0  000000b0  00000124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.i2c_start 00000006  000000b6  000000b6  0000012a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_stop 00000006  000000bc  000000bc  00000130  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_send 0000000e  000000a2  000000a2  00000116  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000020  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  0000008c  0000008c  00000100  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   8:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
   c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  10:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  14:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  18:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  1c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  20:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  24:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  28:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  2c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  30:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  34:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  38:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  3c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  40:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  44:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  48:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  4c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>
  50:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.i2c_init:

000000b0 <i2c_init>:

#endif /* MAIN_H_ */

void i2c_init(void)
{
	TWBR = 0x20; //десятичное  32-  частота 10kHZ при тактировании 8 мГц
  b0:	80 e2       	ldi	r24, 0x20	; 32
  b2:	80 b9       	out	0x00, r24	; 0
  b4:	08 95       	ret

Disassembly of section .text.i2c_start:

000000b6 <i2c_start>:
}

void i2c_start(void) // старт и2с
{
	TWCR =(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);// Interrput \ start \ enable
  b6:	84 ea       	ldi	r24, 0xA4	; 164
  b8:	86 bf       	out	0x36, r24	; 54
  ba:	08 95       	ret

Disassembly of section .text.i2c_stop:

000000bc <i2c_stop>:
}
void i2c_stop(void) // stop i2c
{
	TWCR =(1<<TWINT)|(1<<TWSTO)|(1<<TWEN); // в бит стоп 1
  bc:	84 e9       	ldi	r24, 0x94	; 148
  be:	86 bf       	out	0x36, r24	; 54
  c0:	08 95       	ret

Disassembly of section .text.i2c_send:

000000a2 <i2c_send>:
}
void i2c_send(unsigned char data)
{
	TWDR = data;// запись данных в регистр данных
  a2:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);//вкл передача
  a4:	84 e8       	ldi	r24, 0x84	; 132
  a6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT))); // twint ждем в нуле
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <i2c_send+0x6>
}
  ae:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
		buffer[i] = 0xFF;
		}
	*/
	
	
i2c_init();
  6c:	0e 94 58 00 	call	0xb0	; 0xb0 <i2c_init>
	
i2c_start();     
  70:	0e 94 5b 00 	call	0xb6	; 0xb6 <i2c_start>
i2c_send(0x78);  
  74:	88 e7       	ldi	r24, 0x78	; 120
  76:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_send>
i2c_send(0x00);
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_send>
i2c_send(0xA7);
  80:	87 ea       	ldi	r24, 0xA7	; 167
  82:	0e 94 51 00 	call	0xa2	; 0xa2 <i2c_send>
/*int i;    
for(i = 0; i < 1024; i++) {
	i2c_send(buffer[i]);
	}
*/		
i2c_stop();
  86:	0e 94 5e 00 	call	0xbc	; 0xbc <i2c_stop>
  8a:	ff cf       	rjmp	.-2      	; 0x8a <main+0x1e>

Disassembly of section .text.__dummy_fini:

000000ca <_fini>:
  ca:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000cc <__funcs_on_exit>:
  cc:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000ce <__simulator_exit>:
  ce:	08 95       	ret

Disassembly of section .text.exit:

0000008c <exit>:
  8c:	ec 01       	movw	r28, r24
  8e:	0e 94 66 00 	call	0xcc	; 0xcc <__funcs_on_exit>
  92:	0e 94 65 00 	call	0xca	; 0xca <_fini>
  96:	ce 01       	movw	r24, r28
  98:	0e 94 67 00 	call	0xce	; 0xce <__simulator_exit>
  9c:	ce 01       	movw	r24, r28
  9e:	0e 94 63 00 	call	0xc6	; 0xc6 <_Exit>

Disassembly of section .text._Exit:

000000c6 <_Exit>:
  c6:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
