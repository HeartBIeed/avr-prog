
i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000186  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001b5  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000955  00000000  00000000  00000203  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000597  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  000010ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  000013c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000002d  00000000  00000000  00001573  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000104  00000104  00000178  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.i2c_init 00000006  000000f2  000000f2  00000166  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.i2c_start 00000006  000000f8  000000f8  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.i2c_stop 00000006  000000fe  000000fe  00000172  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.i2c_send 0000000e  000000e4  000000e4  00000158  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000062  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_fini 00000002  0000010c  0000010c  00000180  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_funcs_on_exit 00000002  0000010e  0000010e  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_simulator_exit 00000002  00000110  00000110  00000184  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.exit    00000016  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._Exit   00000004  00000108  00000108  0000017c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   8:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
   c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  10:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  14:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  18:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  1c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  20:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  24:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  28:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  2c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  30:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  34:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  38:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  3c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  40:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  44:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  48:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>
  50:	0c 94 82 00 	jmp	0x104	; 0x104 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 67 00 	jmp	0xce	; 0xce <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

00000104 <__bad_interrupt>:
 104:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.i2c_init:

000000f2 <i2c_init>:

#endif /* MAIN_H_ */

void i2c_init(void)
{
	TWBR = 0x20; //десятичное  32-  частота 10kHZ при тактировании 8 мГц
  f2:	80 e2       	ldi	r24, 0x20	; 32
  f4:	80 b9       	out	0x00, r24	; 0
  f6:	08 95       	ret

Disassembly of section .text.i2c_start:

000000f8 <i2c_start>:
}

void i2c_start(void) // старт и2с
{
	TWCR =(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);// Interrput \ start \ enable
  f8:	84 ea       	ldi	r24, 0xA4	; 164
  fa:	86 bf       	out	0x36, r24	; 54
  fc:	08 95       	ret

Disassembly of section .text.i2c_stop:

000000fe <i2c_stop>:
}
void i2c_stop(void) // stop i2c
{
	TWCR =(1<<TWINT)|(1<<TWSTO)|(1<<TWEN); // в бит стоп 1
  fe:	84 e9       	ldi	r24, 0x94	; 148
 100:	86 bf       	out	0x36, r24	; 54
 102:	08 95       	ret

Disassembly of section .text.i2c_send:

000000e4 <i2c_send>:
}
void i2c_send(unsigned char data)
{
	TWDR = data;// запись данных в регистр данных
  e4:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);//вкл передача
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT))); // twint ждем в 1
  ea:	06 b6       	in	r0, 0x36	; 54
  ec:	07 fe       	sbrs	r0, 7
  ee:	fd cf       	rjmp	.-6      	; 0xea <i2c_send+0x6>
}
  f0:	08 95       	ret

Disassembly of section .text.main:

0000006c <main>:
		buffer[i] = 0xFF;
		}
	*/
	
	
i2c_init();
  6c:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c_init>
	
i2c_start();     
  70:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_start>
i2c_send(0x78);  
  74:	88 e7       	ldi	r24, 0x78	; 120
  76:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>

i2c_send(0xA8);
  7a:	88 ea       	ldi	r24, 0xA8	; 168
  7c:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0xD3);
  80:	83 ed       	ldi	r24, 0xD3	; 211
  82:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0x40);
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0xA0);
  8c:	80 ea       	ldi	r24, 0xA0	; 160
  8e:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0xC0);
  92:	80 ec       	ldi	r24, 0xC0	; 192
  94:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0xDA);
  98:	8a ed       	ldi	r24, 0xDA	; 218
  9a:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0x81);
  9e:	81 e8       	ldi	r24, 0x81	; 129
  a0:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0xA4);
  a4:	84 ea       	ldi	r24, 0xA4	; 164
  a6:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0xA6);
  aa:	86 ea       	ldi	r24, 0xA6	; 166
  ac:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0xD5);
  b0:	85 ed       	ldi	r24, 0xD5	; 213
  b2:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0x8D);
  b6:	8d e8       	ldi	r24, 0x8D	; 141
  b8:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
i2c_send(0xAF);
  bc:	8f ea       	ldi	r24, 0xAF	; 175
  be:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>


i2c_send(0xA7);
  c2:	87 ea       	ldi	r24, 0xA7	; 167
  c4:	0e 94 72 00 	call	0xe4	; 0xe4 <i2c_send>
/*int i;    
for(i = 0; i < 1024; i++) {
	i2c_send(buffer[i]);
	}
*/		
i2c_stop();
  c8:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_stop>
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x60>

Disassembly of section .text.__dummy_fini:

0000010c <_fini>:
 10c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000010e <__funcs_on_exit>:
 10e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000110 <__simulator_exit>:
 110:	08 95       	ret

Disassembly of section .text.exit:

000000ce <exit>:
  ce:	ec 01       	movw	r28, r24
  d0:	0e 94 87 00 	call	0x10e	; 0x10e <__funcs_on_exit>
  d4:	0e 94 86 00 	call	0x10c	; 0x10c <_fini>
  d8:	ce 01       	movw	r24, r28
  da:	0e 94 88 00 	call	0x110	; 0x110 <__simulator_exit>
  de:	ce 01       	movw	r24, r28
  e0:	0e 94 84 00 	call	0x108	; 0x108 <_Exit>

Disassembly of section .text._Exit:

00000108 <_Exit>:
 108:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
