
interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fc  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000022b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000239  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000880  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000237  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000012f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001af  00000000  00000000  00001344  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ab  00000000  00000000  000014f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000015a  0000015a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.__vector_1 0000003c  00000108  00000108  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.main    0000005a  000000ae  000000ae  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .bss.flag     00000004  00800060  00800060  000001fc  2**0
                  ALLOC
 17 .text.__dummy_fini 00000002  00000162  00000162  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000164  00000164  000001f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000166  00000166  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000144  00000144  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000015e  0000015e  000001f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_1>
   8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 64       	ori	r16, 0x40	; 64
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d4 e0       	ldi	r29, 0x04	; 4
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 57 00 	call	0xae	; 0xae <_etext>
  a6:	0c 94 a2 00 	jmp	0x144	; 0x144 <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

0000015a <__bad_interrupt>:
 15a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.__vector_1:

00000108 <__vector_1>:
volatile uint32_t flag = 0;



ISR(INT0_vect)
    {
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	af 93       	push	r26
 118:	bf 93       	push	r27
flag =1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	a0 e0       	ldi	r26, 0x00	; 0
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 126:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 12e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    }
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	0f 90       	pop	r0
 13c:	0f be       	out	0x3f, r0	; 63
 13e:	0f 90       	pop	r0
 140:	1f 90       	pop	r1
 142:	18 95       	reti

Disassembly of section .text.main:

000000ae <main>:
int main(){
	/*
MCUCR  = (1<<ISC00)|(1<<ISC01); // rising INT0
GICR |= (1<<INT0); // int 0 enable
*/
MCUCR|= (1<<ISC00); // high logic  INT1
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	85 bf       	out	0x35, r24	; 53
GICR |= (1<<INT0); // int 1 enable
  b4:	8b b7       	in	r24, 0x3b	; 59
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	8b bf       	out	0x3b, r24	; 59


	
sei();
  ba:	78 94       	sei
DDRB = 0xFF;
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23

while(1){
	
		if (flag == 1)
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c8:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  cc:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	a1 05       	cpc	r26, r1
  d4:	b1 05       	cpc	r27, r1
  d6:	a1 f7       	brne	.-24     	; 0xc0 <main+0x12>
			{
				PORTB|= (1<<PB7);
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	80 68       	ori	r24, 0x80	; 128
  dc:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	83 ed       	ldi	r24, 0xD3	; 211
  e2:	90 e3       	ldi	r25, 0x30	; 48
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x36>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x40>
  ee:	00 00       	nop
				_delay_ms(2000);
				PORTB&= ~(1<< PB7);
  f0:	88 b3       	in	r24, 0x18	; 24
  f2:	8f 77       	andi	r24, 0x7F	; 127
  f4:	88 bb       	out	0x18, r24	; 24
				flag = 0;
  f6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  fa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  fe:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 102:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 106:	dc cf       	rjmp	.-72     	; 0xc0 <main+0x12>

Disassembly of section .text.__dummy_fini:

00000162 <_fini>:
 162:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000164 <__funcs_on_exit>:
 164:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000166 <__simulator_exit>:
 166:	08 95       	ret

Disassembly of section .text.exit:

00000144 <exit>:
 144:	ec 01       	movw	r28, r24
 146:	0e 94 b2 00 	call	0x164	; 0x164 <__funcs_on_exit>
 14a:	0e 94 b1 00 	call	0x162	; 0x162 <_fini>
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 b3 00 	call	0x166	; 0x166 <__simulator_exit>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 af 00 	call	0x15e	; 0x15e <_Exit>

Disassembly of section .text._Exit:

0000015e <_Exit>:
 15e:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>
